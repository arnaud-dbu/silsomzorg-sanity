---
import { Image } from "astro:assets";
import { srcSet, urlFor, fullWidthSizes } from "../utils/image";
const { block } = Astro.props;
let aspectRatio = "";
let grid = "";
const { length } = block.images;
const preserveRatio = block.preserveRatio;

if (!preserveRatio) {
  if (length % 2 === 0) {
    grid = "sm:grid-cols-2";
    aspectRatio = "aspect-[4/3]";
  } else if (length % 3 === 0) {
    grid = "md:grid-cols-3";
    aspectRatio = "aspect-[4/3]";
  } else {
    grid = "";
    aspectRatio = "aspect-[4/3] md:aspect-[2/1]";
  }
}
---

<div class="w-full">
  {preserveRatio ? (
    <div class="max-w-3xl mx-auto space-y-6">
      {block.images.map((image: any) => {
        const imageUrl = urlFor(image).url();
        return (
          <Image
            sizes={fullWidthSizes()}
            srcset={srcSet(imageUrl)}
            width={1000}
            height={1000}
            src={imageUrl}
            alt={image.alt ?? ""}
            class="object-cover w-full"
          />
        );
      })}
    </div>
  ) : (
    <div class={`gap-6 grid grid-cols-1 xl:gap-10 ${grid}`}>
      {block.images.map((image: any, index: number) => {
        const imageUrl = urlFor(image).url();
        const isFirst = index === 0;
        const isLast = index === block.images.length - 1;
        return (
          <Image
            sizes={fullWidthSizes()}
            srcset={srcSet(imageUrl)}
            width={1000}
            height={1000}
            src={imageUrl}
            alt={image.alt ?? ""}
            class={`object-cover w-full h-full ${
              isFirst ? "img-rounded-first" : ""
            } ${isLast ? "img-rounded-last" : ""} ${aspectRatio}`}
          />
        );
      })}
    </div>
  )}
</div>