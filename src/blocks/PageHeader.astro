---
import { urlFor } from "../utils/image";

interface Props {
  data: {
    image?: any;
    title: string;
    description?: string;
    hotspot?: {
      x: number;
      y: number;
    };
  };
  detail?: boolean;
}

const { data, detail } = Astro.props;
const imageUrl = data.image ? urlFor(data.image).url() : null;
---

<div>
  <div
    class="min-h-[45rem] md:min-h-[40rem] pt-40 flex bg-primary-200 bg-no-repeat bg-cover grayscale bg-fixed rounded-edge items-end relative"
    style={imageUrl
      ? `background-image: url("${imageUrl}");background-position: ${(data.image?.hotspot?.x ?? 0.5) * 100}% ${(data.image?.hotspot?.y ?? 0.5) * 100}%;`
      : ""}
  >
    {
      data.image && (
        <>
          <div class="primary-overlay z-10" />
          <div class="gradient-overlay-bt z-20" />
          <div class="gradient-overlay-tb z-20" />
        </>
      )
    }

    {
      !detail && (
        <div class="container relative z-30">
          <div
            class={`${
              data.image ? "text-primary-200" : "text-primary"
            }  relative z-10 w-full lg:w-1/2 spacing-y mb-28`}
          >
            <h1>{data.title}</h1>
            {data.description && (
              <p class={data.image ? "text-white" : "text-black"}>
                {data.description}
              </p>
            )}
          </div>
        </div>
      )
    }
  </div>

  {
    detail && (
      <div class="container relative z-20 !px-0 md:!px-4">
        <div class="relative -top-60 -mb-60 flex flex-col">
          <div
            class={`${
              imageUrl ? "w-full" : "w-full max-w-[60rem]"
            } ${detail ? "text-center" : ""} p-6 text-white bg-primary lg:p-12 xl:p-16 space-y-4 lg:space-y-6`}
          >
            <h1 class="text-4xl sm:text-7xl md:text-8xl lg:text-9xl">
              {data.title}
            </h1>
            {data.description && (
              <p class="text-lg md:text-xl">{data.description}</p>
            )}
          </div>
        </div>
      </div>
    )
  }
</div>
