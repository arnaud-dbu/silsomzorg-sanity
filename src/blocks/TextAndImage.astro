---
import { urlFor } from "../utils/image";
import { Image } from "astro:assets";
import { PortableText } from "astro-portabletext";
import { srcSet, halfWidthSizes } from "../utils/image";
import Link from "../components/Link.astro";

const { block } = Astro.props;

function cleanString(str = "") {
  return str.replace(/[^\x20-\x7E]/g, "");
}

let imageUrl;
let hasValidImage = false;
try {
  if (block.image && block.image._type === "image" && block.image.asset) {
    imageUrl = urlFor(block.image).url();
    hasValidImage = !!imageUrl;
  }
} catch (error) {
  console.error("Error generating image URL:", error);
}

const imgPosition = cleanString(block.image?.imagePosition || "");

let imgContainer;
let imageAlignment;
if (block.fullWidth) {
  imgContainer = "full-width-image";
  imageAlignment = imgPosition === "image-right" ? "image-right" : "";
} else {
  imgContainer =
    "flex flex-col gap-6 md:gap-16 xl:gap-32 md:items-start xl:items-center";
  imageAlignment =
    imgPosition === "image-right" ? "md:flex-row-reverse" : "md:flex-row";
}
---

<section class={`${imgContainer} ${imageAlignment}`}>
  {
    hasValidImage && (
      <Image
        sizes={halfWidthSizes()}
        srcset={srcSet(imageUrl ?? "")}
        width={1000}
        height={1000}
        src={imageUrl ?? ""}
        alt={block.image?.alt ?? ""}
        class={`${block.fullWidth ? "aspect-square" : "img-rounded aspect-[7/6] md:w-1/2"} object-cover`}
      />
    )
  }
  <div
    class={`spacing-y ${block.fullWidth ? "px-4 py-6 lg:py-12 xl:py-20" : "md:w-1/2"}`}
  >
    <div class="block-heading">
      <span>{block.tagline}</span>
      <h2>{block.title}</h2>
    </div>
    <div class="rich-text">
      <PortableText value={block.richText} />
    </div>
    <div class="flex flex-wrap gap-3">
      {
        block.links?.map((link: any, index: number) => (
          <Link
            data={link}
            style={`${index === 0 ? "btn btn--primary" : "btn btn--outline"}`}
          />
        ))
      }
    </div>
  </div>
</section>
